<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="build">
    <!--
    <property name="phpdir" value="C:/php-5.6.10"/>
    <property name="phplocdir" value="C:/Users/Desarrollo/AppData/Roaming/Composer/vendor/bin"/>
    <property name="phpmddir" value="C:/Users/Desarrollo/AppData/Roaming/Composer/vendor/bin"/>
    <property name="phpcsdir" value="C:/Users/Desarrollo/AppData/Roaming/Composer/vendor/bin"/>
    <property name="phpcpddir" value="C:/Users/Desarrollo/AppData/Roaming/Composer/vendor/bin"/> 
    <property name="phpunitdir" value="C:/Users/Desarrollo/AppData/Roaming/Composer/vendor/bin"/>
    <property name="phpdocdir" value="C:/phpDocumentor-2.8.1/bin"/>
    <property name="jsduckdir" value="C:/Users/Desarrollo/AppData/Roaming/Composer/vendor/bin"/>
    <property name="jshintdir" value="C:/Users/Desarrollo/AppData/Roaming/npm"/>
    <property name="extensionexe" value=".bat"/>
    -->
   
    <property name="phpdir" value="/usr/bin"/>    
    <property name="phplocdir" value="/root/.composer/vendor/bin/"/>
    <property name="phpmddir" value="/root/.composer/vendor/bin/"/>
    <property name="phpcsdir" value="/root/.composer/vendor/bin/"/>
    <property name="phpcpddir" value="/root/.composer/vendor/bin/"/> 
    <property name="phpunitdir" value="/root/.composer/vendor/bin/"/>
    <property name="phpdocdir" value="/root/.composer/vendor/bin/"/>    
    <property name="jsduckdir" value="/usr/bin"/>
    <property name="jshintdir" value="/usr/bin"/>
    <property name="extensionexe" value=""/>
    
    
    <target name="build"
            depends="build-common,phploc-ci,phploc-html,phpcs-ci,phpcs-html,phpcpd-ci,phpunit,phpdoc,jsduck-ci,jshint-ci"
            description=""/>
    
    <target name="build-common" depends="prepare,storage-permissions,bootstrap-permissions" />

    <!-- Elimina directorios el build. -->
    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
     <delete dir="${basedir}/build/phpcd"/>
     <delete dir="${basedir}/build/phploc/logs"/>
     <delete dir="${basedir}/build/phpcs/logs"/>
     <delete dir="${basedir}/build/phpdoc/parser"/>
     <delete dir="${basedir}/build/phpmd"/>
     <delete dir="${basedir}/build/phpunit/logs"/>
     <delete dir="${basedir}/docs/phpdoc"/>
     <delete dir="${basedir}/docs/phpunit/coverage"/>
     <delete dir="${basedir}/build/jshint"/>
     <delete dir="${basedir}/docs/js"/>
     <property name="clean.done" value="true"/>
    </target>
    
    <!-- Crea directorios necesarios para el build. -->
    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
     <mkdir dir="${basedir}/build/phpcd"/>
     <mkdir dir="${basedir}/build/phploc/logs"/>
     <mkdir dir="${basedir}/build/phpcs/logs"/>
     <mkdir dir="${basedir}/build/phpdoc/parser"/>
     <mkdir dir="${basedir}/build/phpmd"/>
     <mkdir dir="${basedir}/build/phpunit/logs"/>
     <mkdir dir="${basedir}/docs/phpdoc"/>
     <mkdir dir="${basedir}/docs/phpunit/coverage"/>
     <mkdir dir="${basedir}/build/jshint"/>
     <mkdir dir="${basedir}/docs/js"/>

     <chmod file="${basedir}/bootstrap/cache/**" perm="770" type="both"/>
     <chmod file="${basedir}/storage/**" perm="770" type="both"/>

     <touch file="${basedir}/storage/logs/laravel.log"/>
     <property name="prepare.done" value="true"/>
    </target>
        
    <!-- Concede permisos la carpeta storage -->
    <target name="storage-permissions" depends="storage-permissions.unix,storage-permissions.windows" description="Setting storage permissions" />

    <!-- LINUX: Concede permisos 777 a la carpeta storage -->
    <target name="storage-permissions.unix" depends="storage.unix.check" if="storage.unix.exist" description="Setting storage permissions on unix">
        <echo>Setting app/storage to 777</echo>
        <chmod file="${basedir}/app/storage/**" perm="777" type="dir" failonerror="false" />
    </target>

    <!-- WINDOWS: Concede permisos +R a la carpeta storage -->
    <target name="storage-permissions.windows" depends="storage.windows.check" if="storage.windows.exist" description="Setting storage permissions on windows">
        <echo>Setting app/storage to writable</echo>
        <attrib file="${basedir}/app/storage/**" perm="+R" failonerror="false" />
    </target>

    <!-- LINUX: Verifica si la carpeta ${basedir}/app/storage existe -->
    <target name="storage.unix.check" description="Check for app/storage on unix">
        <condition property="storage.unix.exist">
            <and>
                <available file="${basedir}/app/storage" type="dir" />
                <os family="unix" />
            </and>
        </condition>
    </target>

    <!-- WINDOWS: Verifica si la carpeta ${basedir}/app/storage existe -->
    <target name="storage.windows.check" description="Check for app/storage on windows">
        <condition property="storage.windows.exist">
            <and>
                <available file="${basedir}/app/storage" type="dir" />
                <os family="windows" />
            </and>
        </condition>
    </target>
    
    <!-- Concede permisos la carpeta bootstrap -->
    <target name="bootstrap-permissions" depends="bootstrap-permissions.unix,bootstrap-permissions.windows" description="Setting bootstrap permissions" />

    <!-- LINUX: Concede permisos 777 a la carpeta bootstrap -->
    <target name="bootstrap-permissions.unix" depends="bootstrap.unix.check" if="bootstrap.unix.exist" description="Setting bootstrap permissions on unix">
        <echo>Setting app/bootstrap to 777</echo>
        <chmod file="${basedir}/app/bootstrap/**" perm="777" type="dir" failonerror="false" />
    </target>

    <!-- WINDOWS: Concede permisos +R a la carpeta bootstrap -->
    <target name="bootstrap-permissions.windows" depends="bootstrap.windows.check" if="bootstrap.windows.exist" description="Setting bootstrap permissions on windows">
        <echo>Setting app/bootstrap to writable</echo>
        <attrib file="${basedir}/app/bootstrap/**" perm="+R" failonerror="false" />
    </target>

    <!-- LINUX: Verifica si la carpeta ${basedir}/app/storage existe -->
    <target name="bootstrap.unix.check" description="Check for app/bootstrap on unix">
        <condition property="bootstrap.unix.exist">
            <and>
                <available file="${basedir}/app/bootstrap" type="dir" />
                <os family="unix" />
            </and>
        </condition>
    </target>

    <!-- WINDOWS: Verifica si la carpeta ${basedir}/app/bootstrap existe -->
    <target name="bootstrap.windows.check" description="Check for app/bootstrap on windows">
        <condition property="bootstrap.windows.exist">
            <and>
                <available file="${basedir}/app/bootstrap" type="dir" />
                <os family="windows" />
            </and>
        </condition>
    </target>    
    
    <!-- Elimina el diretorio ${basedir}/vendor -->
    <target name="clean-composer" description="Cleanup composer artifacts">
        <echo>Cleaning out the composer artifacts</echo>
        <delete dir="${basedir}/vendor" />
        <delete file="${basedir}/composer.lock" />
    </target>
    
    <!-- Instala o actualiza las dependencias -->
    <target name="composer" depends="composer-install,composer-update" description="Install or update dependencies" />

    <!-- Indica si la carpeta ${basedir}/vendor existe-->
    <target name="composer.check">
        <condition property="composer.exist">
            <available file="${basedir}/vendor" type="dir" />
        </condition>
    </target>

    <!-- Instala las dependencias -->
    <target name="composer-install" depends="composer.check" unless="composer.exist" description="Installing dependencies">
        <echo>Installing dependencies</echo>
        <exec executable="composer" failonerror="true">
            <arg value="install" />
        </exec>
    </target>
    
    <!-- Actualiza las dependencias -->
    <target name="composer-update" depends="composer.check" if="composer.exist" description="Updating dependencies">
        <echo>Updating dependencies</echo>
        <exec executable="composer" failonerror="true">
            <arg value="update" />
        </exec>
    </target>            
    
    <!-- Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment. -->
    <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phplocdir}/phploc${extensionexe}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/phploc/logs/report.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/phploc/logs/report.xml"/>
            <arg path="${basedir}/app"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>  

    <!-- Transform the XML PHPLOC REPORT into a HTML table. -->
    <target name="phploc-html" unless="phplochtml.done" depends="phploc-ci" description="Transform the XML PHPLOC REPORT into a HTML table.">
        <exec executable="${phpdir}/php" taskname="php">
            <arg value="${basedir}/build/phploc/report.php"/>
	    <redirector output="${basedir}/build/phploc/index.html" alwayslog="false"/> 
        </exec>
        <property name="phplochtml.done" value="true"/>
    </target>

    <!-- Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment. -->
    <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
       <exec executable="${phpcsdir}/phpcs${extensionexe}" taskname="phpcs">
           <!-- Ignorar warnings -->
           <arg value="-n"/>
           <!-- Estandar PSR2 -->
           <arg value="--standard=PSR2"/>
           <!-- Unicamente procesar  .php -->
           <arg value="--extensions=php"/>
           <!-- Ignorar archivos -->
           <arg value="--ignore=app/Console/Kernel.php,app/Http/Controllers/Generic/*,app/Http/Controllers/Controller.php,app/http/Middleware/*,app/Http/Requests/Request.php,app/Http/Kernel.php,app/Http/routes.php,app/Http/Jobs/Job.php,app/Http/Providers/*"/>
           <!-- Reporte checkstyle -->
           <arg value="--report-checkstyle=build/phpcs/logs/checkstyle.xml"/>
           <!-- Reporte gitblame -->
           <arg value="--report-gitblame=build/phpcs/logs/gitblame.txt"/>
           <!-- Detalle en el reporte de gitblame --> 
           <arg value="-s"/>
           <!-- Enconding utf-8 -->
           <arg value="--encoding=utf-8"/>
           <!-- Analizar el directorio app/ -->
           <arg value="app/"/>
       </exec>
       <property name="phpcs.done" value="true"/>
    </target>
    
    <!-- Transform the GIT BLAME REPORT into a HTML table. -->
    <target name="phpcs-html" unless="phpcshtml.done" depends="phpcs-ci" description="Transform the GIT BLAME REPORT into a HTML table.">
        <exec executable="${phpdir}/php" taskname="php">
            <arg value="${basedir}/build/phpcs/report.php"/>
	    <redirector output="${basedir}/build/phpcs/index.html" alwayslog="false"/> 
        </exec>
        <property name="phpcshtml.done" value="true"/>
    </target>
        
    <!-- Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment. -->
    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpddir}/phpcpd${extensionexe}" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/phpcpd/report.xml"/>
            <arg path="${basedir}/app"/>
        </exec>
        <property name="phpcpd.done" value="true"/>
    </target>
    
    <!-- Run unit tests with PHPUnit -->
    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="${phpunitdir}/phpunit${extensionexe}" failonerror="true" taskname="phpunit">
            <!-- Archivo de configuracion en build/phpunit/phpunit.xml -->
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit/phpunit.xml"/>
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>
    
    <!-- Generate project documentation using phpDoc -->
    <target name="phpdoc" unless="phpdoc.done" depends="prepare" description="Generate project documentation using phpDoc">
        <exec executable="${phpdocdir}/phpdoc${extensionexe}" dir="${basedir}/build" taskname="phpdoc">
            <arg value="--config"/>
            <arg path="${basedir}/build/phpdoc/phpdoc.xml"/>
        </exec>
        <property name="phpdoc.done" value="true"/>
    </target> 
    
    <!-- Generate project documentation using jsduck -->
    <target name="jsduck-ci" unless="jsduck.done" depends="prepare" description="Generate project documentation using jsduck">
        <exec executable="${jsduckdir}/jsduck" taskname="jsduck">
            <arg value="${basedir}/public/"/>
            <arg value="--output"/>
            <arg path="${basedir}/docs/js"/>
        </exec>
        <property name="jsduck.done" value="true"/>
    </target>   
    
    <!-- Generate jshint report -->
    <target name="jshint-ci" unless="jshint.done" depends="prepare" description="Generate jshint report">
        <exec executable="${jshintdir}/jshint" taskname="jshint">
            <arg value="--reporter=checkstyle"/>
            <arg value="${basedir}/public/app"/>
            <redirector output="${basedir}/build/jshint/checkstyle.xml" alwayslog="false"/> 
        </exec>
        <property name="jshint.done" value="true"/>
    </target>                                                                                      
</project>